import cantools
import cantools.database
import can
from time import sleep
import serial
import re

DBC_FILE = 'Experimentation/DBC Data/LATEST_DBC.dbc'
SIM_DATA_FILE = 'Experimentation/ReadingData/TestData/CANData1/LATEST_DATA.txt'
BG_IMAGE = "Experimentation/ReadingData/Resources/images/bg.jpg"
# CAMERA_RATIO = (480, 480)
ID = [43, 44]  # Message 02B, 02C
db = cantools.database.load_file(DBC_FILE)

ser = serial.Serial(
    port='COM4',
    baudrate=9600,
    timeout=1
)
sleep(2)
ser.write(b'C\r')
print("second write")
# ser.write(b'E0\r')
ser.write(b'S6\r')
print("second write")
ser.write(b'O\r')
print("second write")
ser.write(b'E1\r')
ser.write(b'V\r')  # Version string
print(repr(ser.read_all()))
ser.write(b'F\r')  # Status flags
print(repr(ser.read_all()))

sleep(0.1)
buffer = ""
pattern = re.compile(r't[0-9A-Fa-f]{3}[0-9]([0-9A-Fa-f]{2}){0,8}')

def extract(buffer):
    messages = []
    i = 0
    while i < len(buffer):
        if buffer[i] != 't':
            i += 1
            continue
        if i + 5 >= len(buffer):
            break
        try:
            can_id = int(buffer[i+1:i+4], 16)
            dlc = int(buffer[i+4])
        except:
            i += 1
            continue

        msg_len = 1 + 3 + 1 + dlc * 2
        if i + msg_len > len(buffer):
            break

        msg = buffer[i:i+msg_len]
        messages.append(msg)
        i += msg_len

    return messages, buffer[i:]

try:
    while True:
        # if ser.in_waiting:

            # line = ser.readline().decode('utf-8', errors='ignore').strip()
        chunk = ser.read(ser.in_waiting).decode('utf-8', errors='ignore')
        buffer += chunk
        # raw = ser.read(ser.in_waiting)
        # buffer += ser.read(ser.in_waiting).decode('utf-8', errors='ignore')
        # msgs, buffer = extract(buffer)

        # for msg in msgs:
        #     print(f"Raw: {repr(msg)}")
        #     try:
        #         can_id = int(msg[1:4], 16)
        #         dlc = int(msg[4])
        #         data = bytes.fromhex(msg[5:5 + dlc * 2])
        #         decoded = db.decode_message(can_id, data)
        #         print(decoded)
        #     except Exception as e:
        #         print(f"Error decoding message {msg}: {e}")

        # look for all valid msgs in current buffer
        for match in pattern.finditer(buffer):
            msg = match.group()
            # print(f"Raw: {repr(msg)}")
            try:
                can_id = int(msg[1:4], 16)
                dlc = int(msg[4])
                data = bytes.fromhex(msg[5:5+dlc*2])
                decoded = db.decode_message(can_id, data)
                print(decoded)
                # with open('Experimentation\ReadingData\TestData\CANData1\direct_data.txt', 'a') as file:
                #     file.write(str(msg[0:5+dlc*2]) + "\n")
            except Exception as e:
                print(f"Error!: {e}")

        last_match = list(pattern.finditer(buffer))[-1] if pattern.search(buffer) else None
        buffer = buffer[last_match.end():] if last_match else buffer[-20:]
        # line = repr(rawLine)
        # print(f"Raw: {line}")
        # print(line)
        # try:
        #     line = str(line)
        #     hex_string = line[1:4]

        #     can_id = int(hex_string, 16)
        #     data = bytes.fromhex(line[5:])
        #     try:
        #         msg = db.decode_message(can_id, data)
        #         print(msg)
        #     except Exception as e:
        #         print(f"Message with ID {can_id} not found: {e}")
        # except Exception as e:
        #     print(f"Another error! {e}")



except Exception as e:
    print(f"ERROR {e}")
finally:
    ser.write(b'C\r')
    ser.close()